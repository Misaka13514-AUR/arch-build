name: BUILD

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 */8 * * *"
  workflow_dispatch:

jobs:
  # 读取 PKGLIST 文件并转换成 JSON 给下一步读取
  pkglist:
    runs-on: ubuntu-latest
    outputs:
      data: ${{ steps.parse.outputs.pkglist }}
    steps:
      - uses: actions/checkout@v4
      - uses: fabasoad/data-format-converter-action@main
        id: yaml2json
        with:
          input: "pkglist.yaml"
          from: "yaml"
          to: "json"
      - uses: ./parse-pkglist
        id: parse
        with:
          pkglist: ${{ steps.yaml2json.outputs.output }}

  buildAUR-pack:
    runs-on: ubuntu-latest
    needs:
      - pkglist
    strategy:
      matrix:
        include: ${{ fromJSON(needs.pkglist.outputs.data).builds-on-x86_64 }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: 检查包是否已存在
        id: is-needed
        uses: ./check-is-needed
        with:
          package-name: ${{ matrix.repo }}
          arch: ${{ matrix.arch }}

      - name: 使用 yay 构建包
        id: build
        uses: Misaka13514-AUR/build-aur-action@main
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        with:
          repo-name: ${{ matrix.repo }}
          arch: ${{ matrix.arch }}

      - name: 同步 docker 内外目录
        # $PWD 在 docker 中被映射到 /github/workspace
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        run: |
          sudo mkdir /github
          sudo ln -s $PWD /github/workspace

      - name: 上传包
        if: ${{ steps.is-needed.outputs.is-needed == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.repo }}-${{ matrix.arch }}
          path: ${{ steps.build.outputs.filelist }}

  sync-repo:
    runs-on: ubuntu-latest
    env:
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
    if: always()
    needs:
      - pkglist
      - buildAUR-pack
    steps:
      - name: 下载包
        uses: actions/download-artifact@v3
        with:
          path: rclone-upload/

      - name: 处理 artifact 结构
        run: |
          cd rclone-upload/
          find . -mindepth 2 -type f -exec mv -t . {} +
          find . -mindepth 1 -type d -exec rm -rf {} +
          ls -l

      - name: 计算包数量
        id: count-pkg
        run: |
          echo "::set-output name=count::$(find rclone-upload/ -type f -name '*.tar.zst' | wc -l)"

      - name: 导入 GPG 私钥
        if: ${{ fromJSON(steps.count-pkg.outputs.count) > 0 && env.GPG_PRIVATE_KEY != '' }}
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import

      - name: 签名包
        if: ${{ fromJSON(steps.count-pkg.outputs.count) > 0 && env.GPG_PRIVATE_KEY != '' }}
        run: |
          find rclone-upload/ -type f -name '*.tar.zst' -print -exec sh -c 'gpg --detach-sign "{}"' \;

      - name: 下载包数据库
        if: ${{ fromJSON(steps.count-pkg.outputs.count) > 0 }}
        run: |
          cd rclone-upload/
          wget https://arch-repo.moeneko.workers.dev/x86_64/atri.db.tar.gz || echo '仓库数据库不存在'
          wget https://arch-repo.moeneko.workers.dev/x86_64/atri.files.tar.gz || echo '仓库数据库不存在'

      - name: 添加包到数据库
        if: ${{ fromJSON(steps.count-pkg.outputs.count) > 0 }}
        run: |
          docker run --rm -v "$PWD/rclone-upload/":"/repo" -v "/github/workspace":"/github/workspace" -v /home:/home -v "$PWD":"$PWD" -w "$PWD" archlinux:latest bash -c 'repo-add /repo/atri.db.tar.gz /repo/*.pkg.tar.zst'

      - name: 签名数据库
        if: ${{ fromJSON(steps.count-pkg.outputs.count) > 0 && env.GPG_PRIVATE_KEY != '' }}
        run: |
          find rclone-upload/ -type f,l -name 'atri*' -print -exec sh -c 'gpg --detach-sign "{}"' \;

      - run: ls -l rclone-upload/
        if: ${{ fromJSON(steps.count-pkg.outputs.count) > 0 }}

      - uses: NiceLabs/rclone-action@master
        if: ${{ fromJSON(steps.count-pkg.outputs.count) > 0 }}
        with:
          github-token: ${{ secrets.SECRET_TOKEN }}
          config: ${{ secrets.RCLONE_CONF }}
          config-secret-name: RCLONE_CONF

      - name: 同步到远程仓库
        if: ${{ fromJSON(steps.count-pkg.outputs.count) > 0 }}
        run: |
          rclone copy --copy-links rclone-upload/ ${{ secrets.REPO_PATH }}/
