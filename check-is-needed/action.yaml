name: 检查包是否已存在
inputs:
  package-name:
    required: true
  arch:
    description: 架构
    required: true
outputs:
  is-needed:
    description: true 或者 false 字符串
    value: ${{ steps.check-db.outputs.is-needed }}
  old-package-name:
    description: 在包构建流程结束时需要删除的旧包名
    value: ${{ steps.check-db.outputs.old-package-name }}
  arch:
    description: 包里面标称的架构，下面的步骤用来检测 any
    value: ${{ steps.check-db.outputs.arch }}
runs:
  using: composite
  steps:
    - uses: actions/setup-node@v4

    - name: 下载 PKGBUILD
      shell: bash
      run: |
        if [[ ${{ inputs.package-name }} != ./* ]];then
          git clone https://aur.archlinux.org/${{ inputs.package-name }}.git
        fi

    - name: 下载并解压仓库数据库
      shell: bash
      run: |
        mkdir pkgdb
        wget https://arch-repo.moeneko.workers.dev/${{ inputs.arch }}/atri.files.tar.gz && tar -xzf atri.files.tar.gz -C pkgdb || echo '仓库数据库不存在'

    - name: 更新 VCS 包版本
      shell: bash
      run: |
        cd ${{ inputs.package-name }}
        if grep -q '^pkgver()' PKGBUILD;then
          docker run --rm -v $PWD:/pkg -w /pkg --entrypoint /bin/bash ghcr.io/misaka13514-aur/build-aur-action:main -c 'sudo chown -R builder:builder /pkg && sudo --set-home -u builder makepkg -fA --nodeps --nobuild || (sudo --set-home -u builder yay -Syu --noconfirm && source PKGBUILD && for pkg in ${makedepends[@]} ${depends[@]};do sudo --set-home -u builder yay -S --noconfirm --needed --asdeps $pkg; done && sudo --set-home -u builder makepkg -sfA --needed --noconfirm --nobuild)'
        fi

    - name: 获取包名称
      shell: bash
      id: get-name
      run: |
        if ! source "${{ inputs.package-name }}/PKGBUILD" 2>/dev/null; then
          source <(grep -E '^pkgname=|^pkgbase=|^pkgver=|^pkgrel=|^epoch=|^arch=' "${{ inputs.package-name }}/PKGBUILD")
        fi
        echo pkgname=$pkgname >> $GITHUB_OUTPUT
        echo pkgbase=$pkgbase >> $GITHUB_OUTPUT
        echo pkgver=$pkgver >> $GITHUB_OUTPUT
        echo pkgrel=$pkgrel >> $GITHUB_OUTPUT
        echo epoch=$epoch >> $GITHUB_OUTPUT
        echo arch=$arch >> $GITHUB_OUTPUT

    - name: 检查数据库
      shell: bash
      run: node ${{ github.action_path }}/check-db.js
      id: check-db
      env:
        PKGNAME: ${{ steps.get-name.outputs.pkgname }}
        PKGBASE: ${{ steps.get-name.outputs.pkgbase }}
        PKGVER: ${{ steps.get-name.outputs.pkgver }}
        PKGREL: ${{ steps.get-name.outputs.pkgrel }}
        EPOCH: ${{ steps.get-name.outputs.epoch }}
        ARCH: ${{ steps.get-name.outputs.arch }}
        ARCHIN: ${{ inputs.arch }}
